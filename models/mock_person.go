// Code generated by MockGen. DO NOT EDIT.
// Source: person.go

// Package models is a generated GoMock package.
package models

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPersonInterface is a mock of PersonInterface interface.
type MockPersonInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPersonInterfaceMockRecorder
}

// MockPersonInterfaceMockRecorder is the mock recorder for MockPersonInterface.
type MockPersonInterfaceMockRecorder struct {
	mock *MockPersonInterface
}

// NewMockPersonInterface creates a new mock instance.
func NewMockPersonInterface(ctrl *gomock.Controller) *MockPersonInterface {
	mock := &MockPersonInterface{ctrl: ctrl}
	mock.recorder = &MockPersonInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonInterface) EXPECT() *MockPersonInterfaceMockRecorder {
	return m.recorder
}

// GetAllNames mocks base method.
func (m *MockPersonInterface) GetAllNames() []PersonShort {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNames")
	ret0, _ := ret[0].([]PersonShort)
	return ret0
}

// GetAllNames indicates an expected call of GetAllNames.
func (mr *MockPersonInterfaceMockRecorder) GetAllNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNames", reflect.TypeOf((*MockPersonInterface)(nil).GetAllNames))
}

// GetPerson mocks base method.
func (m *MockPersonInterface) GetPerson(id string) PersonInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", id)
	ret0, _ := ret[0].(PersonInterface)
	return ret0
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockPersonInterfaceMockRecorder) GetPerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockPersonInterface)(nil).GetPerson), id)
}

// PatchPerson mocks base method.
func (m *MockPersonInterface) PatchPerson(id string, body []byte) PersonInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPerson", id, body)
	ret0, _ := ret[0].(PersonInterface)
	return ret0
}

// PatchPerson indicates an expected call of PatchPerson.
func (mr *MockPersonInterfaceMockRecorder) PatchPerson(id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPerson", reflect.TypeOf((*MockPersonInterface)(nil).PatchPerson), id, body)
}

// PostPerson mocks base method.
func (m *MockPersonInterface) PostPerson(body []byte) PersonInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostPerson", body)
	ret0, _ := ret[0].(PersonInterface)
	return ret0
}

// PostPerson indicates an expected call of PostPerson.
func (mr *MockPersonInterfaceMockRecorder) PostPerson(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPerson", reflect.TypeOf((*MockPersonInterface)(nil).PostPerson), body)
}
